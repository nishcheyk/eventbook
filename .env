# Event Booking API

## Project Overview

This is a comprehensive Event Booking API built with **Node.js**, **TypeScript**, **Express**, and **MongoDB**. It supports user registration, authentication, event creation and management, seat booking with individual seat selection, ticket QR code generation, and validation. The project is fully containerized with Docker and optimized for scalability using MongoDB compound indexing for seat bookings.

---

## Features

- User registration and login with JWT authentication  
- Create, read, update, delete (CRUD) events  
- Book tickets by selecting seats  
- Generate and validate QR codes for tickets  
- MongoDB data management using compound indexes for efficient querying  
- Redis support and Email notifications via SMTP  
- SMS notifications through Twilio  
- Dockerized for easy setup and deployment  

---

## Getting Started

### Prerequisites

- Docker and Docker Compose installed (recommended)  
- Node.js and npm for local development (optional)  

### Environment Variables Configuration

Create a `.env` file in the project root with the following:
```
PORT=3000
MONGO_URL=mongodb://localhost:27017/eventbooking

JWT_SECRET=your_jwt_secret_key

REDIS_URL=redis://localhost:6379

SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=bybirthpro@gmail.com
SMTP_PASS=yrpdxhyjjlwvqjrh

MAIL_FROM="Event Booking bybirthpro@gmail.com"

TWILIO_SID=AC64580c8d2a09d55b685e124602cb8e59
TWILIO_AUTH_TOKEN=e40f586fcea702080891c663934a6555
TWILIO_PHONE=+12516992487
```
text

- `MONGO_URL`: MongoDB connection string  
- `JWT_SECRET`: JWT signing key  
- `REDIS_URL`: Redis connection URI for caching or session management  
- `SMTP_*`: For sending emails through Gmail SMTP  
- `MAIL_FROM`: The sender address for emails  
- `TWILIO_*`: Credentials for sending SMS notifications via Twilio  

---

### Installation & Running Locally

1. Clone the repository:
```
git clone <repository-url>
cd event-booking-api
```
text

2. Install dependencies:
```
npm install
```
text

3. Start MongoDB locally or via Docker:
```
docker run -d -p 27017:27017 --name mongo mongo:6.0
```
text

4. Run the app (make sure `.env` is configured):
```
npm run build
npm start
```
text

5. Access API docs at:  
```
`http://localhost:3000/api-docs`
```
---

### Running with Docker

1. Remove existing local modules to avoid native module conflicts:
```
rm -rf node_modules
```


2. Build and start containers:
```
docker-compose up --build
```


3. The app will be accessible at:  
`http://localhost:3000`

---

## MongoDB Schema Design: Using Indexing for Seat Bookings

### Why Not Store Seats as Embedded Arrays in Events?

- Storing seat arrays inside an event document leads to large documents nearing MongoDBâ€™s 16MB size limit.
- Updating seat booking status inside the event causes concurrency and performance issues.
- Querying becomes inefficient with growing document size and concurrent writes.

### Current Approach: Separate Bookings Collection with Compound Index

- Events store general event data and `totalSeats` but **do NOT store seats as an array**.
- All bookings are in a separate `bookings` collection.
- Each booking references an `eventId`, `seatNumber`, `userId`, and has a booking `status`.
- MongoDB uses a **compound index on `(eventId, seatNumber)`**, enabling fast queries to check seat availability like:

db.bookings.findOne({ eventId: "...", seatNumber: 5, status: "booked" });

text

- This allows fast seat availability lookups and scales well for large events.
- MongoDB does not use traditional SQL joins; the app joins data via references.

### Benefits
```
| Aspect                     | Details                                                  |
|----------------------------|----------------------------------------------------------|
| Document Size              | Smaller event documents; avoids large embedded arrays    |
| Performance & Concurrency  | Independent booking docs reduce write conflicts          |
| Query Efficiency           | Compound index offers quick seat availability checks     |
| Scalability                | Supports large user base and events with many seats      |
```
---

## API Summary
```
| Endpoint                   | Method | Description                      | Auth Required |
|----------------------------|--------|---------------------------------|---------------|
| `/api/users/register`       | POST   | Register a new user              | No            |
| `/api/users/login`          | POST   | User login to get JWT token      | No            |
| `/api/events`               | GET    | Get list of all events           | No            |
| `/api/events`               | POST   | Create new event                 | Yes           |
| `/api/events/{id}`          | GET    | Get event by ID                 | No            |
| `/api/events/{id}`          | PUT    | Update event                   | Yes           |
| `/api/events/{id}`          | DELETE | Delete event                   | Yes           |
| `/api/bookings`             | POST   | Book ticket for event          | Yes           |
| `/api/events/{id}/bookings` | GET    | List all bookings for event    | No            |
```
---

## Troubleshooting Common Issues

- **bcrypt native module error (`invalid ELF header`) inside Docker**:  
Remove local `node_modules`, rebuild Docker image, or switch to pure JS `bcryptjs`.

- **`ts-node` not found in Docker**:  
Either compile TypeScript to JavaScript before Docker build and run with `node`, or install `ts-node` and dependencies inside Docker.

- **Environment variables mismatch**:  
Ensure `.env` keys (`MONGO_URL` vs `MONGODB_URI`) match what's read in your config files.

---